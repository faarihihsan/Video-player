[{"X:\\ngoding\\video\\video\\src\\index.js":"1","X:\\ngoding\\video\\video\\src\\reportWebVitals.js":"2","X:\\ngoding\\video\\video\\src\\App.js":"3","X:\\ngoding\\video\\video\\src\\Components\\Navbar\\Navbar.js":"4","X:\\ngoding\\video\\video\\src\\Components\\ListMovies\\ListMovies.js":"5","X:\\ngoding\\video\\video\\src\\Components\\ViewMovie\\ViewMovie.js":"6","X:\\ngoding\\video\\video\\src\\Components\\DetailMovie\\DetailMovie.js":"7"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":4791,"mtime":1611499964870,"results":"11","hashOfConfig":"9"},{"size":877,"mtime":1610950628149,"results":"12","hashOfConfig":"9"},{"size":781,"mtime":1611385953137,"results":"13","hashOfConfig":"9"},{"size":1684,"mtime":1611474802445,"results":"14","hashOfConfig":"9"},{"size":5801,"mtime":1611472287181,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"yad4nz",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},"X:\\ngoding\\video\\video\\src\\index.js",[],["32","33"],"X:\\ngoding\\video\\video\\src\\reportWebVitals.js",[],"X:\\ngoding\\video\\video\\src\\App.js",[],"X:\\ngoding\\video\\video\\src\\Components\\Navbar\\Navbar.js",[],"X:\\ngoding\\video\\video\\src\\Components\\ListMovies\\ListMovies.js",[],"X:\\ngoding\\video\\video\\src\\Components\\ViewMovie\\ViewMovie.js",[],"X:\\ngoding\\video\\video\\src\\Components\\DetailMovie\\DetailMovie.js",["34","35","36","37"],"import React, { Component} from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass DetailMovie extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isSingleMovie : true,\r\n      isFetchDataDone : false\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n      this.getDetailMovie();\r\n  }\r\n\r\n  getDetailMovie = async () => {\r\n    var hasilDetailMovie = [];\r\n    await window.gapi.client.drive.files.list({\r\n        \"orderBy\": \"name\",\r\n        \"q\": `parents = \"${this.props.match.params.id}\"`\r\n    }).then(function(response) {\r\n        hasilDetailMovie = response;\r\n    });\r\n\r\n    var movieDetailFolder = hasilDetailMovie.result.files;\r\n\r\n    if (movieDetailFolder[0].mimeType === \"application/vnd.google-apps.folder\") this.getMultipleMovie(movieDetailFolder);\r\n    else this.getSingleMovie(movieDetailFolder);\r\n  }\r\n\r\n  async getMultipleMovie(fileList){\r\n    var daftarMovie = [];\r\n    for (var i in fileList) {\r\n        var iter = fileList[i];\r\n        var hasilDetailMovie = [];\r\n        await window.gapi.client.drive.files.list({\r\n            \"orderBy\": \"name\",\r\n            \"q\": `parents = '${iter.id}'`\r\n        }).then(function(response) {\r\n            hasilDetailMovie = response;\r\n        });\r\n\r\n        var movieDetailFolder = hasilDetailMovie.result.files;\r\n        var movie = '';\r\n        var title = '';\r\n        \r\n        if (movieDetailFolder[0].mimeType === \"application/vnd.google-apps.folder\"){\r\n            var episodeList = [];\r\n            for (var j in movieDetailFolder){\r\n                var respon = '';\r\n                await window.gapi.client.drive.files.list({\r\n                    \"orderBy\": \"name\",\r\n                    \"q\": `parents = '${movieDetailFolder[j].id}'`\r\n                }).then(function(response) {\r\n                    respon = response.result.files;\r\n                });\r\n                for (var k in respon){\r\n                    var vtt = null;\r\n                    title = respon[k].name;\r\n                    if(respon[k].mimeType === \"video/mp4\" || respon[k].mimeType === \"video/x-matroska\") movie = respon[k].id;\r\n                    else if (respon[k].mimeType === \"text/vtt\") vtt = respon[k].id;\r\n                }\r\n                episodeList.push({\r\n                    'movie':movie,\r\n                    'title':title,\r\n                    'vtt': vtt\r\n                });\r\n            }\r\n            daftarMovie.push({\r\n                'season': iter.name,\r\n                'movie': episodeList\r\n            });\r\n            this.setState({\r\n                isSingleMovie: false,\r\n                isAnySeason: true,\r\n                movieList : daftarMovie,\r\n                isFetchDataDone: true\r\n            });\r\n        }else{\r\n            for (var j in movieDetailFolder){\r\n                var vtt = null;\r\n                if(movieDetailFolder[j].mimeType === \"video/mp4\" || movieDetailFolder[j].mimeType === \"video/x-matroska\") movie = movieDetailFolder[j].id;\r\n                else if (movieDetailFolder[j].mimeType === \"text/vtt\") vtt = movieDetailFolder[j].id;\r\n                daftarMovie.push({\r\n                    'movie':movie,\r\n                    'title':iter.name,\r\n                    'vtt': vtt\r\n                });\r\n            }\r\n            this.setState({\r\n                isSingleMovie: false,\r\n                isAnySeason: false,\r\n                movieList : daftarMovie,\r\n                isFetchDataDone: true\r\n            });\r\n        }        \r\n    }\r\n  }\r\n\r\n  getSingleMovie(movieDetailFolder) {\r\n      console.log(movieDetailFolder);\r\n    for (var j in movieDetailFolder){\r\n        if(movieDetailFolder[j].mimeType === \"video/mp4\" || movieDetailFolder[j].mimeType === \"video/x-matroska\") \r\n            this.setState({\r\n                movie : movieDetailFolder[j].name,\r\n                movieLink : movieDetailFolder[j].id\r\n            });\r\n        else if (movieDetailFolder[j].mimeType === \"application/octet-stream\") \r\n            this.setState({\r\n                vtt : movieDetailFolder[j].id\r\n            });\r\n    }\r\n    this.setState({\r\n        isSingleMovie: true,\r\n        isFetchDataDone: true\r\n    });\r\n  }\r\n\r\n  getListMovie(listMovies){\r\n    return(\r\n        <ul className=\"list-group list-group-flush\">\r\n            {listMovies.map((value) => {\r\n                return <li className=\"list-group-item\"><Link to={`/view/${value.movie}/${value.vtt}`}>{value.title}</Link></li>\r\n            })}\r\n        </ul>\r\n    );\r\n  }\r\n\r\n  render(){\r\n    const renderDetailListMovie = () => {\r\n        if (this.state.isSingleMovie && this.state.isFetchDataDone){\r\n            console.log(this.state.vtt);\r\n            return(\r\n                <div>\r\n                    <h3>{this.state.movie}</h3>\r\n                    <h5><Link to={`/view/${this.state.movieLink}/${this.state.vtt}`}>Watch</Link></h5>\r\n                </div>\r\n            );\r\n        }else if (!this.state.isSingleMovie && this.state.isFetchDataDone && this.state.isAnySeason){\r\n            var list = this.state.movieList;\r\n            return(\r\n                <div>\r\n                    {list.map((value) => {\r\n                        return(\r\n                            <span>\r\n                                <h3 className=\"mt-5\">{value.season}</h3>\r\n                                {this.getListMovie(value.movie)}\r\n                            </span>\r\n                        );\r\n                    })}\r\n                </div>\r\n            );\r\n        } else if (!this.state.isSingleMovie && this.state.isFetchDataDone && !this.state.isAnySeason){\r\n            return(this.getListMovie(this.state.movieList));\r\n        }\r\n        else return(\"Loading\");\r\n      } \r\n\r\n    return (\r\n      <div className=\"container\">\r\n        {renderDetailListMovie()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DetailMovie;",{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":40,"column":17,"nodeType":"44","messageId":"45","endLine":42,"endColumn":10},{"ruleId":"42","severity":1,"message":"46","line":55,"column":25,"nodeType":"44","messageId":"45","endLine":57,"endColumn":18},{"ruleId":"47","severity":1,"message":"48","line":81,"column":22,"nodeType":"49","messageId":"50","endLine":81,"endColumn":23},{"ruleId":"47","severity":1,"message":"51","line":82,"column":21,"nodeType":"49","messageId":"50","endLine":82,"endColumn":24},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'hasilDetailMovie'.","FunctionExpression","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'respon'.","no-redeclare","'j' is already defined.","Identifier","redeclared","'vtt' is already defined.","no-global-assign","no-unsafe-negation"]